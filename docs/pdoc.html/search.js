window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "ediff", "modulename": "ediff", "kind": "module", "doc": "<h6 id=\"ediff-package\">EDIFF package</h6>\n\n<p>Utilities for simple processing of electron diffraction patterns.</p>\n"}, {"fullname": "ediff.background", "modulename": "ediff.background", "kind": "module", "doc": "<h2 id=\"module-ediffbackground\">Module ediff.background</h2>\n\n<p>Interactive background definition.</p>\n"}, {"fullname": "ediff.center", "modulename": "ediff.center", "kind": "module", "doc": "<h2 id=\"module-ediffcenter\">Module ediff.center</h2>\n\n<p>Find center of 2D diffraction pattern.</p>\n"}, {"fullname": "ediff.center.central_square", "modulename": "ediff.center", "qualname": "central_square", "kind": "function", "doc": "<p>Return central square from an array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">csquare</span>, </span><span class=\"param\"><span class=\"n\">xcenter</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">ycenter</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.center.intensity_center", "modulename": "ediff.center", "qualname": "intensity_center", "kind": "function", "doc": "<p>Find center of intensity/mass of an array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe array, whose intensity center will be determined.</li>\n<li><strong>csquare</strong> (int, optional, default is 20):\nThe size/edge of the square in the (geometrical) center.\nThe intensity center will be searched only within the central square.\nReasons: To avoid other spots/diffractions and\nto minimize the effect of possible intensity assymetry around center.</li>\n<li><strong>cintensity</strong> (float, optional, default is 0.8):\nThe intensity fraction.\nWhen searching the intensity center, we will consider only\npixels with intensity &gt; max.intensity.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>xc,yc</strong> (int,int):\nXY-coordinate of the intensity/mass center of the array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.io", "modulename": "ediff.io", "kind": "module", "doc": "<h2 id=\"module-ediffio\">Module ediff.io</h2>\n\n<p>Input/output functions for package ediff.</p>\n"}, {"fullname": "ediff.io.read_image", "modulename": "ediff.io", "qualname": "read_image", "kind": "function", "doc": "<p>Read grayscale image into 2D numpy array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_name</strong> (string or pathlib object):\nName of image that should read into numpy 2D array.</li>\n<li><strong>itype</strong> (string ('8bit'  or '16bit')):\ntype of the image: 8 or 16 bit grayscale</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>2D numpy array</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_name</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.io.plot_radial_distributions", "modulename": "ediff.io", "qualname": "plot_radial_distributions", "kind": "function", "doc": "<p>Plot one or more 1D-radial distrubution files in one graph.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_to_plot</strong> (2D-list):\n<ul>\n<li>list with several rows containing [data, linestyle, label]</li>\n<li>data = data for plotting - they can be one of the following:\n<ul>\n<li>PNG filename = str, a PNG-file = 2D diffraction pattern</li>\n<li>TXT filename = str, a text file = 1D diffraction profile</li>\n<li>2D-array = a numpy array, containg 2D diffraction pattern</li>\n<li>1D-array = a numpy array, containing 1D diffraction profile</li>\n<li>Note1: 2D-pattern = a square image/array with intensities</li>\n<li>Note2: 1D-profile = a text file/array with two cols/rows = [R,I],\nwhere R = distance from center, I = diffraction intensity</li>\n</ul></li>\n<li>linestyle = matplotlib.pyplot format, such as 'r-' (red line)</li>\n<li>label = name of the data, which will appear in the plot legend</li>\n</ul></li>\n<li><strong>xlimit</strong> (int):\nmaximum of the X-axis</li>\n<li><strong>ylimit</strong> (int):\nmaximum of the Y-axis</li>\n<li><strong>output</strong> (int, optional, default=None):\nName of the output file;\nif the <em>output</em> argument is given,\nthe plot is not only shown on screen, but also saved in <em>output</em> file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output is the plot on screen\n(and in <em>output file</em> if the <em>output</em> argument was given).</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>This function is quite flexible.\nIt can plot one radial distribution or more.\nIt can take data from PNG-files, TXT-files, 2D-arrays and 1D-arrays.\nThis makes the code a bit more complex, but it is convenient for the user.\nA fast comparison of three 1D-distributions from three 2D-diffractograms:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ediff</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">plot_radial_distributions</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">data_to_plot</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"p\">[</span><span class=\"s1\">&#39;sum_all_16bit.png&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;k:&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;All data&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"p\">[</span><span class=\"s1\">&#39;sum_f_16bit.png&#39;</span><span class=\"p\">,</span>   <span class=\"s1\">&#39;b--&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F data&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"p\">[</span><span class=\"s1\">&#39;sum_fd_16bit.png&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;r-&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;FD data&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">xlimit</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">ylimit</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;sums_final_1d.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_to_plot</span>, </span><span class=\"param\"><span class=\"n\">xlimit</span>, </span><span class=\"param\"><span class=\"n\">ylimit</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd", "modulename": "ediff.pxrd", "kind": "module", "doc": "<h2 id=\"module-ediffpxrd\">Module ediff.pxrd</h2>\n\n<p>Calculation of powder X-ray diffraction patterns.</p>\n"}, {"fullname": "ediff.pxrd.Crystal", "modulename": "ediff.pxrd", "qualname": "Crystal", "kind": "class", "doc": "<p>Define crystal structure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>structure</strong> (structure object):\n<ul>\n<li>The <em>structure object</em> is usually obtained from a CIF-file\n(CIF = Crystallographic Information File).</li>\n<li>The <em>CIF files</em> are available in crystallographic databases,\nsuch as <a href=\"http://www.crystallography.net\"><a href=\"http://www.crystallography.net\">http://www.crystallography.net</a></a></li>\n<li>The exact type of the object is <em>pymatgen.core.structure.Structure</em>\n<ul>\n<li>This indicates that the structure is read from CIF by means of\npymatgen package (which works behind the sceenes).</li>\n<li>This also means that the structure can be created by any\nother way available in pymatgen <a href=\"https://pymatgen.org/\"><a href=\"https://pymatgen.org/\"><a href=\"https://pymatgen.org/\">https://pymatgen.org/</a></a></a></li>\n<li>Nevertheless, for common usage it is enough to\nread the structure from CIF, ignoring technical details.</li>\n</ul></li>\n</ul></li>\n<li><strong>temp_factors</strong> (float or dictionary, optional, the default is 0.8):\n<ul>\n<li>Temperature factors characterize thermal movement of atoms.</li>\n<li>If a float value is given,\nall elements have this temperature factor value.</li>\n<li>If a dictionary is given,\nthe elements have the values defined in the dictionary;\na sample input dictionary: <code>temp_factors = {'Na':1.2, 'Cl':1.1}</code>.</li>\n</ul></li>\n</ul>\n"}, {"fullname": "ediff.pxrd.Crystal.__init__", "modulename": "ediff.pxrd", "qualname": "Crystal.__init__", "kind": "function", "doc": "<ul>\n<li>Initialize Crystal object.</li>\n<li>The parameters are described above in class definition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure</span>, </span><span class=\"param\"><span class=\"n\">temp_factors</span><span class=\"o\">=</span><span class=\"mf\">0.8</span></span>)</span>"}, {"fullname": "ediff.pxrd.Crystal.read_structure_from_CIF", "modulename": "ediff.pxrd", "qualname": "Crystal.read_structure_from_CIF", "kind": "function", "doc": "<p>Read crystall structure from CIF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>CIF</strong> (str or path object):\n<ul>\n<li>The filename of CIF file.</li>\n<li>CIF = Crystallographic Information File\ncontains information about crystal structure.</li>\n<li>CIF files are usually obtained from crystallographic databases,\nsuch as <a href=\"http://www.crystallography.net\"><a href=\"http://www.crystallography.net\">http://www.crystallography.net</a></a></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>structure</strong> (structure object):\n<ul>\n<li>The exact type of the object is\n<em>pymatgen.core.structure.Structure</em>.</li>\n<li>Nevertheless, in the structure objects are usually\ncreated from CIF files (pymatgen is hidden for a common user).</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">CIF</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.Crystal.get_elements", "modulename": "ediff.pxrd", "qualname": "Crystal.get_elements", "kind": "function", "doc": "<p>Get a list of all elements, which are contained in given structure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>structure</strong> (structure object):\nTypically, the structure objects are\ncreated by function <em>read_structure_from_CIF</em> above.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list_of_elements</strong> (list):\nList with symbols of all elements\nthat are present in given <em>structure</em>.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<ul>\n<li>The elements are obtained from <em>structure</em> object.</li>\n<li>The structure object = pymatgen.core.structure.Structure.</li>\n<li>The list of element names si obtained by a set of tricks\nspecific to pymatgen-structure object.</li>\n<li>These tricks were revealed by inspecting the original\npymatgen.core.structure.Structure in Spyder,\nby means of shortcuts Ctrl+I (help) and Ctrl+G (go to code).</li>\n<li>Common users do not have to use this function.</li>\n<li>The function is just used internally, when setting\ntemperature factors of the elements contained in given <em>structure</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">structure</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.Crystal.get_elements_with_temp_factors", "modulename": "ediff.pxrd", "qualname": "Crystal.get_elements_with_temp_factors", "kind": "function", "doc": "<p>Get a dictionary, which contains symbols and temperature factors\nof all elements, which are present in given structure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>structure</strong> (structure object):\nTypically, the structure objects are\ncreated by function <em>read_structure_from_CIF</em> above.</li>\n<li><strong>B</strong> (float, optional, the default is 0.8):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>elements_with_temp_factors</strong> (dict):\nDictionary with symbols and temperature factors\nof all elements, which are present in given <em>structure</em>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The dictionary is in the format required by pymatgen package.</li>\n<li>The pymatgen package is used for PXRD calculations,\nbut these calculations are hidden from common users.</li>\n<li>Common users do not use this function.</li>\n<li>The function is just used internally, when setting\ntemperature factors of the elements contained in given <em>structure</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">structure</span>, </span><span class=\"param\"><span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mf\">0.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.Experiment", "modulename": "ediff.pxrd", "qualname": "Experiment", "kind": "class", "doc": "<p>Define experimental parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>wavelength</strong> (float):\nWavelength of the X-rays.\nTypical values are 1.54 A (CuKa) or 0.71 A (MoKa).</li>\n<li><strong>two_theta_range</strong> (list/tuple of two floats):\nMinimal and maximal diffraction angle;\nboth values are TwoTheta angle in [deg] (for given <em>wavelength</em>).</li>\n</ul>\n"}, {"fullname": "ediff.pxrd.Experiment.__init__", "modulename": "ediff.pxrd", "qualname": "Experiment.__init__", "kind": "function", "doc": "<ul>\n<li>Initialize Experimental object.</li>\n<li>The parameters are described above in class definition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wavelength</span>, </span><span class=\"param\"><span class=\"n\">two_theta_range</span></span>)</span>"}, {"fullname": "ediff.pxrd.PlotParameters", "modulename": "ediff.pxrd", "qualname": "PlotParameters", "kind": "class", "doc": "<p>Define local+global parameters for plotting.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>title</strong> (str):\nTitle of the plot.</li>\n<li><strong>x_axis</strong> (str, 'TwoTheta','S','q' or 'dhkl', optional, default is 'q'):\nQuantity for X-axis.</li>\n<li><strong>rcParams</strong> (dict; optional, the default is empty dictionary {}):\nThe dictionary should have the format of mathplotlib.pyplot.rcParams.\nThe argmument is passed to matplotlib.pyplot.rcParams.update.\nThe initialization procedure creates some default rcParams.\nThis argument can override the pre-defined parameters,\nwhich means that the default is created anyway\nand then it can be adjusted here by rcParams argument.</li>\n</ul>\n"}, {"fullname": "ediff.pxrd.PlotParameters.__init__", "modulename": "ediff.pxrd", "qualname": "PlotParameters.__init__", "kind": "function", "doc": "<ul>\n<li>Initialize PlotParameters object.</li>\n<li>The parameters are described above in class definition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">x_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;q&#39;</span>, </span><span class=\"param\"><span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"p\">{}</span></span>)</span>"}, {"fullname": "ediff.pxrd.PlotParameters.set_default_rcParams", "modulename": "ediff.pxrd", "qualname": "PlotParameters.set_default_rcParams", "kind": "function", "doc": "<p>A class method defining global plot parameters (plt.rcParams).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>my_rcParams</strong> (dictionary):\ncontaining selected plt.rcParams keys)\nDESCRIPTION. The default is {}.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, BUT it redefines global variable plt.rcParams!</strong></li>\n<li><strong>Notes:</strong></li>\n<li><strong>------</strong></li>\n<li><strong>* This is a @classmethod (because it is used within the whole class)</strong>: but it could be a @staticmethod as well (because it does not use\ncls variable in fact).</li>\n<li><strong>* The method is employed in two ways:</strong>: - standard usage of MCREEP package: default rcParams are used\n(and possibly modified) in objects of PlotParameters class\n<ul>\n<li>special usage of MCREEP (more figures, multiplots): default\nrcParams are used when definining the axes of (multiple)figures</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">my_rcParams</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PeakProfiles", "modulename": "ediff.pxrd", "qualname": "PeakProfiles", "kind": "class", "doc": "<p>Define profile of diffraction peaks.</p>\n\n<ul>\n<li>This class is employed only as a namespace.</li>\n<li>It contains three functions/definitions of diffratction peak profiles.</li>\n</ul>\n"}, {"fullname": "ediff.pxrd.PeakProfiles.gaussian", "modulename": "ediff.pxrd", "qualname": "PeakProfiles.gaussian", "kind": "function", "doc": "<p>Gaussian function (~ profile for PXRD calculation).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (numpy array):\nX-variable of Gaussian function.</li>\n<li><strong>m</strong> (float):\nMean value = the center of Gaussian function.</li>\n<li><strong>s</strong> (float):\nStandard deviation = the width of Gaussian function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NumPy array</strong>: The array with Y-values of the function; Y = Gaussian(X).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PeakProfiles.lorentzian", "modulename": "ediff.pxrd", "qualname": "PeakProfiles.lorentzian", "kind": "function", "doc": "<p>Lorentzian function (~ profile for PXRD calculation).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (numpy array):\nX-variable of Lorentzian function.</li>\n<li><strong>m</strong> (float):\nMean value = the center of Lorentzian function.</li>\n<li><strong>s</strong> (float):\nStandard deviation = the width of Lorentzian function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NumPy array</strong>: The array with Y-values of the functin; Y = Lorenzian(X).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PeakProfiles.pseudo_voigt", "modulename": "ediff.pxrd", "qualname": "PeakProfiles.pseudo_voigt", "kind": "function", "doc": "<p>Pseudo-Voigt function (~ profile for PXRD calculation).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (numpy array):\nX-variable of pseudo-Voigt function.</li>\n<li><strong>m</strong> (float):\nMean value = the center of pseudo-Voigt function.</li>\n<li><strong>s</strong> (float):\nStandard deviation = the width of pseudo-Voigt function.</li>\n<li><strong>n</strong> (float, optional, the default is 0.5):\nRatio between Gaussian and Lorentzian components.\nIn the very first approximation, we can set n = 0.5.\nFor more details, see <em>Notes</em> subsection below.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NumPy array</strong>: The array with Y-values of the functin; Y = Lorenzian(X).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>Pseudo-Voigt function\n= linear combination of Gaussian and Lorentzian function.</li>\n<li>In the 1st approximation:\n<ul>\n<li>50/50 combination =&gt; n = 0.5</li>\n<li>sg = sigma_Gaussian\ndefined so that sg and s yielded the same FWHM</li>\n</ul></li>\n<li>more details in:\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Voigt_profile\"><a href=\"https://en.wikipedia.org/wiki/Voigt_profile\">https://en.wikipedia.org/wiki/Voigt_profile</a></a></li>\n<li><a href=\"https://lmfit.github.io/lmfit-py/builtin_models.html\"><a href=\"https://lmfit.github.io/lmfit-py/builtin_models.html\">https://lmfit.github.io/lmfit-py/builtin_models.html</a></a></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation", "kind": "class", "doc": "<p>Define calculation of PXRD = powder X-ray diffraction pattern.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>crystal</strong> (ediff.pxrd.Crystal object):\nThis object is usually prepared in advance\nas an instance of ediff.pxrd.Crystal class.</li>\n<li><strong>experiment</strong> (ediff.pxrd.Experiment object):\nThis object is usually prepared in advance\nas an instance of ediff.pxrd.Experiment class.</li>\n<li><strong>plot_parameters</strong> (ediff.pxrd.PlotParameters object):\nThis object is usually prepared in advance\nas an instance of ediff.pxrd.PlotParameters class.</li>\n<li><strong>peak_profile_sigma</strong> (float, optional, the default is 0.03):\nWidth of the calculated diffraction peaks.\nThe default = 0.03 is suitable for most of common calculations\nand corresponds to the default in older PowderCell program (n*FWHM=7).\nFor overlapping peaks it may be slightly decreased,\nwhile for more realistic diffractograms it may be slightly increased.</li>\n<li><strong>peak_profile_type</strong> (None or ediff.pxrd.PeakProfiles object, optional):\nProfile of the calculated diffraction peaks.\nThe default is PeakProfiles.pseudo_voigt.\nThis default is suitable for common calculations\nand does not have to be changed (in great majority of cases).</li>\n</ul>\n"}, {"fullname": "ediff.pxrd.PXRDcalculation.__init__", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.__init__", "kind": "function", "doc": "<p>Initialize PXRDcalcualtion object.\nThe parameters are described above in class definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">crystal</span>,</span><span class=\"param\">\t<span class=\"n\">experiment</span>,</span><span class=\"param\">\t<span class=\"n\">plot_parameters</span>,</span><span class=\"param\">\t<span class=\"n\">peak_profile_sigma</span><span class=\"o\">=</span><span class=\"mf\">0.03</span>,</span><span class=\"param\">\t<span class=\"n\">peak_profile_type</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">PeakProfiles</span><span class=\"o\">.</span><span class=\"n\">pseudo_voigt</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "ediff.pxrd.PXRDcalculation.calculate_diffractions", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.calculate_diffractions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.calculate_diffractogram", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.calculate_diffractogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.print_diffractions", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.print_diffractions", "kind": "function", "doc": "<p>Print the calculated diffractions to stdout.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.save_diffractions", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.save_diffractions", "kind": "function", "doc": "<p>Save the calculated diffractions to <em>output_file</em>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong> (str):\nName of the output file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None; the output is the list of diffractions in the <em>output_file</em>.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.plot_diffractions", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.plot_diffractions", "kind": "function", "doc": "<p>Plot the calculated diffractions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outfile</strong> (str, optional, the default is none):\nName of the output file.\nIf not given, the plot is just shown, but not saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>* None; the output is the plot on the screen (and outfile).</strong></li>\n<li><strong>* Note that the plot shows just diffraction intensities, not profiles.</strong></li>\n<li><strong>* Use <em>plot_diffractogram</em> for diffractogram with intensity profiles.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outfile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.plot_diffractions_with_indexes", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.plot_diffractions_with_indexes", "kind": "function", "doc": "<p>Plot indexed diffractions.</p>\n\n<h2 id=\"important-interactive-plots-in-spyder\">Important - interactive plots in Spyder</h2>\n\n<ul>\n<li>This function can create interactive plot.\n<ul>\n<li>In CLI (command line) - the plot is interactive automatically.</li>\n<li>In Spyder IDE - default is to create non-interactive plots.</li>\n</ul></li>\n<li>If you want the interactive plot in Spyder IDE, type in Console ...\n<ul>\n<li>BEFORE running (to switch on interactivity): %matplotlib qt</li>\n<li>AFTER running (back to non-interactive mode): %matplotlib inline</li>\n</ul></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>* None; this function is to be called exclusively</strong>: as method of PXRDcalculation object.</li>\n<li><strong>* If PXRDcalculation is properly initialized,</strong>: additional parameters are not needed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>* None; the output is the plot in the screen.</strong></li>\n<li><strong>* In typical case, the plot is interactive</strong>: so that the indexed diffractions could be expected in detail.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>The code below uses (sligthly modified) PyMatGen functions.</li>\n<li>Reason: PyMatGen plotting works well with diffraction indexes.\nRe-programing of indexed plots would be difficult and useless...</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.print_diffractogram", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.print_diffractogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.save_diffractogram", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.save_diffractogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outfile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.plot_diffractogram", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.plot_diffractogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outfile</span>, </span><span class=\"param\"><span class=\"n\">x_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;q&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.diffractions_to_dframe", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.diffractions_to_dframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">intensities</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.dframe_to_table", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.dframe_to_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.add_diffraction_vectors_to_diffractogram", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.add_diffraction_vectors_to_diffractogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.pxrd.PXRDcalculation.set_plot_details", "modulename": "ediff.pxrd", "qualname": "PXRDcalculation.set_plot_details", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_axis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.radial", "modulename": "ediff.radial", "kind": "module", "doc": "<h2 id=\"module-ediffradial\">Module ediff.radial</h2>\n\n<p>The conversion of a 2D powder diffraction pattern\nto a 1D powder diffraction pattern = radially averaged intensity distribution.</p>\n"}, {"fullname": "ediff.radial.calc_radial_distribution", "modulename": "ediff.radial", "qualname": "calc_radial_distribution", "kind": "function", "doc": "<p>Calculate 1D-radially averaged distrubution profile\nfrom 2D-PNBD diffraction pattern.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe numpy array which contains the 2D-PNBD pattern.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>radial_distance, intensity</strong> (1D numpy arrays):\n<ul>\n<li>radial_distance = distances from the center of 2D-PNBD [pixels]</li>\n<li>intensity = intensities at given distances [arbitrary units]</li>\n</ul></li>\n</ul>\n\n<h6 id=\"note\">Note</h6>\n\n<ul>\n<li>The plot of [radial_distance, intensity] = 1D-radial profile\ncorresponding to the input 2D-PNBD diffraction pattern.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.radial.save_radial_distribution", "modulename": "ediff.radial", "qualname": "save_radial_distribution", "kind": "function", "doc": "<p>Save 1D-radially averaged distrubution profile,\nwhich is calculated from 2D-PNBD diffraction pattern, as a TXT-file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe numpy array which contains the 2D-PNBD pattern.</li>\n<li><strong>filename</strong> (str):\nName of the output file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong>: The output is the radial distribution saved in a file with <em>filename</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ediff.radial.read_radial_distribution", "modulename": "ediff.radial", "qualname": "read_radial_distribution", "kind": "function", "doc": "<p>Read 1D-radially averaged distrubution profile from a TXT-file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nName of the input file;\nthe file is expected to contain two columns [distance, intensity].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe array containing two columns: distance, intensity.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();